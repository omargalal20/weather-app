properties([pipelineTriggers([githubPush()])])

pipeline {
    agent any

    environment {
        BUILD_VERSION = '1.0.1'
        CI = 'true'
        SERVICE_NAME = 'frontend'
        ECR_REPO = 'weather-app-frontend-repo'
        DEPLOYMENT_FILE = 'docker/docker-compose.frontend.yml'
    }

    stages {
        stage('Pre-Build') {
            when {
                changeset '**/frontend/**'
            }
            steps {
                dir('frontend') {
                    echo 'Pre-Build...'
                }
            }
        }
        stage('Build') {
            when {
                changeset '**/frontend/**'
            }
            steps {
                dir('frontend') {
                    echo 'Building...'
                    script {
                        withCredentials([string(credentialsId: 'ecr-url', variable: 'ECR_URL')]) {
                            sh """
                                docker build --build-arg BUILD_ENV=development -t ${ECR_REPO}:${BUILD_VERSION} .
                                docker tag ${ECR_REPO}:${BUILD_VERSION} ${ECR_URL}/${ECR_REPO}:${BUILD_VERSION}
                            """
                        }
                    }
                }
            }
        }
        stage('Test') {
            when {
                changeset '**/frontend/**'
            }
            steps {
                dir('frontend') {
                    echo 'Testing...'
                }
            }
        }
        stage('Push Docker Image to ECR') {
            when {
                changeset '**/frontend/**'
            }
            steps {
                dir('frontend') {
                    echo 'Pushing Docker image to ECR...'
                    script {
                        withCredentials([string(credentialsId: 'ecr-url', variable: 'ECR_URL'),
                            string(credentialsId: 'aws-region', variable: 'REGION')]) {
                            sh """
                                aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_URL}
                                docker push ${ECR_URL}/${ECR_REPO}:${BUILD_VERSION}
                            """
                        }
                    }
                }
            }
        }
        stage('Deploy App') {
            when {
                changeset '**/frontend/**'
            }
            steps {
                dir('frontend') {
                    echo 'Deploying App...'
                    script {
                        withCredentials([string(credentialsId: 'ecr-url', variable: 'ECR_URL'),
                                         string(credentialsId: 'aws-region', variable: 'REGION'),
                                         file(credentialsId: 'frontend-service-variables', variable: 'frontend_service_variables')]) {
                            script {
                                data = readYaml file: DEPLOYMENT_FILE
                                data.services[SERVICE_NAME].image = "${ECR_URL}/${ECR_REPO}:${BUILD_VERSION}".replaceAll('"', '')
                                writeYaml file: DEPLOYMENT_FILE, data: data, overwrite: true
                            }

                            writeFile file: 'docker/frontend-service-variables.env', text: readFile(frontend_service_variables)

                            sh "aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_URL}"
                            sh "docker-compose -f ./${DEPLOYMENT_FILE} --env-file ./docker/frontend-service-variables.env config | docker-compose -f ./${DEPLOYMENT_FILE} up -d"
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully.'
            echo 'Send status Success to Mail, Telegram, Slack...'
        }
        failure {
            echo 'Pipeline execution failed.'
            echo 'Send status Failure to Mail, Telegram, Slack...'
        }
    }
}
